<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>  
        class DataSource {
            constructor() {
                let i = 0;
                this._id = setInterval(() => this.emit(i++), 200); // 创建定时器
            }
            
            emit(n) {
                const limit = 10;  // 设置数据上限值
                if (this.ondata) {
                    this.ondata(n);
                }
                if (n === limit) {
                    if (this.oncomplete) {
                        this.oncomplete();
                    }
                    this.destroy();
                }
            }         
            destroy() { // 清除定时器
                clearInterval(this._id);
            }
        }
        //用于按需处理
        class SafeObserver {
            constructor(destination) {
                this.destination = destination;
            }
            
            next(value) {
                // 尚未取消订阅，且包含next方法
                if (!this.isUnsubscribed && this.destination.next) {
                try {
                    this.destination.next(value);
                } catch (err) {
                    // 出现异常时，取消订阅释放资源，再抛出异常
                    this.unsubscribe();
                    throw err;
                }
                }
            }
            
            error(err) {
                // 尚未取消订阅，且包含error方法
                if (!this.isUnsubscribed && this.destination.error) {
                try {
                    this.destination.error(err);
                } catch (e2) {
                    // 出现异常时，取消订阅释放资源，再抛出异常
                    this.unsubscribe();
                    throw e2;
                }
                this.unsubscribe();
                }
            }

            complete() {
                // 尚未取消订阅，且包含complete方法
                if (!this.isUnsubscribed && this.destination.complete) {
                try {
                    this.destination.complete();
                } catch (err) {
                    // 出现异常时，取消订阅释放资源，再抛出异常
                    this.unsubscribe();
                    throw err;
                }
                this.unsubscribe();
                }
            }
            
            unsubscribe() { 
                // 用于取消订阅
                this.isUnsubscribed = true;
                if (this.unsub) {
                    console.log(111)
                    this.unsub();
                }
            }
        }

        function myObservable(observer) {
            let safeObserver = new SafeObserver(observer)
            let datasource = new DataSource(); // 创建数据源
            datasource.ondata = (e) => safeObserver.next(e); // 处理数据流
            datasource.onerror = (err) => safeObserver.error(err); // 处理异常
            datasource.oncomplete = () => safeObserver.complete(); // 处理数据流终止

            return () => { // 返回一个函数用于，销毁数据源
                console.log('unsub');
                datasource.destroy();
            };
        }

        const unsub = myObservable({
            next(x) { console.log(x); },
            error(err) { console.error(err); },
            complete() { console.log('done')}
        });
        // unsub();
    </script>
</body>
</html>